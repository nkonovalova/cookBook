openapi: 3.0.0
servers:
  # Added by API Auto Mocking Plugin
  # Added by API Auto Mocking Plugin
  - description: SwaggerHub API Auto Mocking
    url: https://virtserver.swaggerhub.com/KONATAWORK_1/cookbook/1.0.0
  - description: SwaggerHub API Auto Mocking
    url: https://virtserver.swaggerhub.com/konatawork/cookbook/1.0.0
info:
  description: Api for CookBook pet project
  version: "1.0.0"
  title: Api for CookBook pet project
  contact:
    email: konata.work@gmail.com
  license:
    name: Apache 2.0
    url: 'http://www.apache.org/licenses/LICENSE-2.0.html'
tags:
  - name: categories
    description: category of dishes
  - name: ingridients
    description: ingridients for dishes
  - name: recipes
paths:
  /categories:
    get:
      tags:
        - categories
      summary: searches categories of recipes
      parameters: []
      responses:
        '200':
          description: search results matching criteria
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Category'
    post:
      tags:
        - categories
      summary: create new category of recipes
      parameters:
        - name: name
          in: query
          required: true
          description: new category name
          schema:
            type: object
            properties:
              name:
                type: string
      responses:
        '200':
          description: new category successfully created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Category'
  /categories/{id}:
    get:
      tags:
        - categories
      summary: find category by id
      parameters:
        - in: path
          name: id
          description: find category by id
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: successful search category by id
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Category'
        '404':
          description: category not found
    put:
      tags:
        - categories
      summary: change category by id
      parameters:
        - name: id
          in: path
          description: id of changing category
          required: true
          schema:
            type: integer
        - name: body
          in: query
          description: new category data
          required: true
          schema:
            type: object
            properties:
              name:
                type: string
      responses:
        '200':
          description: category successfully changed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Category'
    delete:
      tags:
        - categories
      summary: delete category by id
      parameters:
        - name: id
          in: path
          description: id of deleting category
          required: true
          schema:
            type: integer
      responses:
        '400':
          description: invalid category id
        '404':
          description: category not found
  /ingridients:
    get:
      tags:
        - ingridients
      summary: searches ingridients for recipes
      parameters: []
      responses:
        '200':
          description: get ingridient list
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Ingridient'
    post:
      tags:
        - ingridients
      summary: create new ingridient
      parameters:
        - name: name
          in: query
          required: true
          description: new ingridient name
          schema:
            type: object
            properties:
              name:
                type: string
      responses:
        '200':
          description: new ingridient successfully created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Ingridient'
  /ingridients/{id}:
    get:
      tags:
        - ingridients
      summary: find ingridient by id
      parameters:
        - in: path
          name: id
          description: find ingridient by id
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: successful search ingridient by id
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Ingridient'
        '404':
          description: ingridient not found
    put:
      tags:
        - ingridients
      summary: change ingridient by id
      parameters:
        - name: id
          in: path
          description: id of changing ingridient
          required: true
          schema:
            type: integer
        - name: body
          in: query
          description: new ingridient data
          required: true
          schema:
            type: object
            properties:
              name:
                type: string
      responses:
        '200':
          description: ingridient successfully changed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Ingridient'
    delete:
      tags:
        - ingridients
      summary: delete ingridient by id
      parameters:
        - name: id
          in: path
          description: id of deleting ingridient
          required: true
          schema:
            type: integer
      responses:
        '400':
          description: invalid ingridient id
        '404':
          description: ingridient not found
  /recipes:
    get:
      tags:
        - recipes
      summary: recipe list
      parameters: []
      responses:
        '200':
          description: get recipe list
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Recipe'
    post:
      tags:
        - recipes
      summary: create new recipe
      parameters:
        - name: data
          in: query
          required: true
          description: new recipe data
          schema:
            $ref: '#/components/schemas/Recipe'
      responses:
        '200':
          description: new recipe successfully created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Recipe'
  /recipes/{id}:
    get:
      tags:
        - recipes
      summary: find recipe by id
      parameters:
        - in: path
          name: id
          description: find recipe by id
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: successful search recipe by id
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Recipe'
        '404':
          description: recipe not found
    put:
      tags:
        - recipes
      summary: change recipe by id
      parameters:
        - name: id
          in: path
          description: id of changing recipe
          required: true
          schema:
            type: integer
        - name: body
          in: query
          description: new recipe data
          required: true
          schema:
            $ref: '#/components/schemas/Recipe'
      responses:
        '200':
          description: recipe successfully changed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Recipe'
    delete:
      tags:
        - recipes
      summary: delete recipe by id
      parameters:
        - name: id
          in: path
          description: id of deleting recipe
          required: true
          schema:
            type: integer
      responses:
        '400':
          description: invalid recipe id
        '404':
          description: recipe not found
components:
  schemas:
    User:
      type: object
      required:
        - id
        - email
        - password
      properties:
        id:
          type: integer
          format: int64
          example: 120
        name:
          type: string
          example: Patty
        surname:
          type: string
          example: Smith
        email:
          type: string
          example: test@test.com
    Recipe:
      type: object
      required:
        - id
        - name
      properties:
        id:
          type: integer
          format: int64
          example: 121
        name:
          type: string
          example: Яблочный пирог
        author:
          type: integer
          format: int64
          example: 123
        category:
          type: integer
          format: int64
          example: 223
        ingridients:
          type: array
          items:
            type: object
            properties:
              id:
                type: integer
                format: int64
                example: 122
              amount:
                type: integer
                format: int64
                example: 100
              unit:
                type: string
                example: кг
        stages:
          type: array
          items:
            type: object
            $ref: "#/components/schemas/RecipeStage"
    Ingridient:
      type: object
      required:
        - id
        - name
      properties:
        id:
          type: integer
          format: int64
          example: 122
        name:
          type: string
          example: Мука
    Category:
      type: object
      required:
        - id
        - name
      properties:
        id:
          type: integer
          format: int64
          example: 122
        name:
          type: string
          example: Выпечка
    RecipeStage:
      type: object
      required:
        - index
        - text
      properties:
        index:
          type: integer
          format: int64
          example: 1
        text:
          type: string
          example: Разогрейте духовку до 180 градусов.